1.c
Написать программу для перевод символов в верхний регистр.
Входные данные:
	Один символ в нижнем регистре.
Выходные данные:
	Тот же самый символ, но в верхнем регистре.
2.c
Вывести соседние символы в таблице ASCII.
Входные данные:
	Один символ латинского алфавита.
Выходные данные:
	Два символа, записанные через пробел. 
	Первый - символ, предшествующий исходному символу в кодовой таблице ASCII, 
	второй - символ, следующий за исходным символом в таблице ASCII.
3.c
Написать программу для подсчёта различных символов, которые поступают на вход.
Входные данные:
	Первая строка одно натуральное число N. Далее с новой строки записаны через
	пробел N символов латинского алфавита (как в верхнем, так и в нижнем регистре).
Выходные данные:
	26 чисел, записанных через пробел. Первое число - количество раз, 
	которое во входных данных встречается буквы А или a, 
	второе число -- количество раз, которое во входных данных 
	встречается буквы B или b, и т.д.
4.c
Определить тип символа.
Входные данные:
	Один символ. Либо буква латинского алфавита, либо цифра.
Выходные данные:
	digit - если это цифра, en - если это буква латинского алфавита. 
	В иных случаях вывести error.
5.c
Вывести на экран K символ латинского алфавита в верхнем и нижнем регистре.
Входные данные:
	Одно натуральное число K, (K < 27).
Выходные данные:
	K-ый символ латинского алфавита. Сначала в верхнем регистре, 
	потом в нижнем, без пробела между символами.
6.c
Вывести на экран последние K символов латинского алфавита в верхнем регистре в алфавитном порядке.
Входные данные:
	Одно натуральное число K, (K < 27).
Выходные данные:
	K последних символов латинского алфавита.
7.c
Длина строки.
Подсчитать количество символов в строке, без учёта нуль-символа.
Входные данные:
	Символьная строка
Выходные данные:
	Одно целое число - длина входной символьной строки.
8.c
Слова.
Подсчитать количество слов в строке. Под словом будем понимать непустую последовательность символов, 
разделённую знаками пробела.
Входные данные:
	Символьная строка, состоящая из слов, разделённых пробелами. 
	Длина строки не превышает 100 символов.
Выходные данные:
	Одно целое число - количество слов во входной символьной строке.
9.c
Поиск символа
Найти в строке заданный символ.
Входные данные:
	Первая строка - символ, который необходимо найти. Максимальная длина строки 100 символов. 
	Затем с новой строки записана символьная строка, в которой нужно осуществить поиск.
Выходные данные:
	Одно целое число - позиция первого вхождения искомого символа в во входную строку или 
	число -1, если символ не найден.
10.c
Системы счисления
Дана строка, изображающая двоичную запись целого положительного числа. 
Вывести строку, изображающую десятичную запись этого же числа.
Входные данные:
	Строка символов, содержащая нули и единицы
Выходные данные:
	Строка, отображающее число, которое соответствует десятичной записи двоичного числа, 
	поступившего на вход.
11.c
Лишние пробелы
Удалить из строки лишние пробелы. Пробел считается лишним, если:
	стоит в начале строки;
	стоит в конце строки;
	ему предшествует пробел.
Входные данные:
	Строка символов.
Выходные данные:
	Исходная строка без лишних пробелов.
12.c
Расстояние Хэмминга.
Расстояние Хэмминга для двух слов одинаковой длины — это количество позиций, в которых различаются эти слова. 
Для двух заданных строк найти расстояние между ними.
Входные данные:
	Две символьные строки одинаковой длины, записанные каждая на отдельной строке. 
	Длины строк не превышают 13.
Выходные данные:
	Одно целое число - расстояние Хэмминга.
13.c
Остров сокровищ
Капитан Флинт зарыл клад на Острове сокровищ. Есть описание, как найти клад.
Описание состоит из строк вида: "North 5", где первое слово – одно из "North", "South", "East", "West", 
а второе целое число – количество шагов, которое необходимо пройти в этом направлении.
Напишите программу, которая по описанию пути к кладу определяет точные координаты клада, считая,
что начало координат находится в начале пути, ось OX направлена на восток, ось OY – на север.
Входные данные:
	В первой строке натуральное число N. Затем с новой строки N строк, указанного формата.
Выходные данные:
	Вывести координаты клада – два целых числа через пробел.
14.c
Комментарии
Удалить часть символьной строки, заключенную между последовательностями символов /* и */.
Входные данные:
	Строка символов, содержащая не более одной последовательности символов вида /* ... */ 
	и имеющая не более 100 символов.  В строке могут содержаться непарные символы */ и /*, 
	их удалять не нужно.
Выходные данные:
	Вывести исходную строку, преобразованную указанным способом.
15.c
Форматированный вывод числа.
Написать программу, реализующую вывод числа с разделением на триады цифр.
Входные данные:
	Целое положительное число.
Выходные данные:
	Вывести введённое число, отформатированное соответствующим образом. 
	Лишние пробелы в конце и начале строки считаются ошибкой.
16.c
Число.
Дана строка. Определить является ли данная строка записью числа (целого или вещественного). 
Дробная и вещественная части разделены десятичной точкой.
Входные данные:
	Строка символов.
Выходные данные:
	Вывести int, если входная строка является целым числом, 
	float, если входная строка является вещественным числом, иначе вывести error.
17.c
Дана строка. Найти в ней слова, которые начинаются и оканчиваются одной и той же буквой. 
Слова разделяются пробелами.
Входные данные:
	Символьная строка
Выходные данные:
	Вывести из строки слова, которые начинаются и заканчиваются одной и той же буквой. 
	Выводить в том же порядке, в котором они встречаются в исходной строке.
18.c
Шифровка.
В строке слова зашифрованы — каждое из них записано наоборот. Написать программу, расшифровывающую строку.
Входные данные:
	Символьная строка.
Выходные данные:
	Вывести расшифрованную строку.
19.c
Программа приветствие
Допишите программу приветствие. Программа должна склеивать строку, которая уже есть в программе 
и строку, введенную пользователем.
Входные данные:
	Одна символьная строка. Длина строки не более 20 символов.
Выходные данные:
	Строка приветствия пользователя.
20.c
Имя файла.
Вывести полное название файла в формате
	имя_файла.расширение
Входные данные:
	Две символьных строки, записанные каждая с новой строки.
	В первой строке записано имя файла (не более 25 символов), 
	а во второй -- его расширение (3 символа).
Выходные данные:
	Одна строка указанного формата.
21.c
Города
Определить можно ли из указанных слов составить цепочку для игры в "Города". 
Т.е. либо первая буква второго слова совпадает с последней буквой первого слова, 
либо наоборот. Названия городов, как и полагается, записаны с заглавной буквы.
Входные данные:
	Две символьных строки, записанные каждая с новой строки.
	Длина строк не более 50 символов.
Выходные данные:
	yes - если из указанных слов можно составить цепочку для игры в "Города",
	no - в противном случае.
22.c
Сравнение строк
Даны две строки. Необходимо сравнить строки между собой с учётом регистра символов.
Входные данные:
	Две символьных строки, записанные каждая с новой строки. 
	Длина строк не более 50 символов.
Выходные данные:
	yes если строки полностью совпадают, no в противном случае.
23.c
Сравнение строк
Даны две строки. Необходимо сравнить строки между собой без учёта регистра символов.
Входные данные:
	Две символьных строки, записанные каждая с новой строки. 
	Длина строк не более 50 символов.
Выходные данные:
	yes если строки полностью совпадают, no в противном случае.
24.c
Счастливый билетик.
Напишите программу проверки того, что число, записанное в строке, является номером счастливого 
билетика. Билет называется счастливым, если сумма первых трёх цифр номера билета равняется сумме 
последних трёх цифр номера билета.
Входные данные:
	Одна строка, содержащая число.  Длина строки  6 символов.
Выходные данные:
	yes если строка является номером счастливого билетика, no в противном случае.
25.c
Написать программу, проверяющую, можно ли из букв, входящих в первую строку, составить вторую строку. 
(буквы можно использовать не более одного раза и можно переставлять)
Входные данные:
	Две символьных строки, записанные каждая с новой строки. Длина строк не более 50 символов. 
	Строки состоят только из строчных букв латинского алфавита.
Выходные данные:
	yes - если из букв первой строки, можно составить вторую строку, 
	no - в противном случае.
26.c
Азбука Морзе.
Написать программу, которая переводила бы строку на английском языке в морзянку.
Входные данные:
	Строка, состоящая из букв латинского алфавита. Длина строки не более 50 символов.
Выходные данные:
	Строка, соответствующая коду Морзе исходной строки. 
	Пробел между словами заменить на знак "|:_..._:|". 
	Отдельные символы разделять между собой  "|".  