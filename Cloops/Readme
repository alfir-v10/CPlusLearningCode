1.c
Написать программу выводящую на экран первые N натуральных чисел.
Входные данные:
	Одно  целое число N, N>0
Выходные данные:
	Первые N натуральных чисел, записанных через пробел.
2.c
Усовершенствуйте программу, написанную на прошлом шаге.
Теперь необходимо вывести все натуральные числа из промежутка [K, M], (K<M)
Входные данные:
	Два целых числа K, M. При этом M больше K.
Выходные данные:
	Натуральные числа в порядке возрастания принадлежащие промежутку [K,M].
	Числа нужно разделять одним пробелом.
3.c
Усовершенствовать программу, написанную на прошлом шаге:
дополнительно на отдельной строке вывести количество напечатанных чисел.
Входные данные:
	Два целых числа K, M. При этом M больше K.
Выходные данные:
	Натуральные числа в порядке возрастания, принадлежащие промежутку [K,M].
	Числа нужно разделять одним пробелом.
	На новой строке вывести количество выведенных натуральных чисел.

4.c
Вывести через пробел все целые числа из промежутка [A,B], (A<B) в обратном порядке:
от B до A.
Входные данные:
	Два целых числа A, B, при этом A<B.
Выходные данные:
	Целые числа из промежутка от [A,B], записанные через пробел в обратном порядке.

5.c
Факториал.
Для целого числа k (0 ≤ k ≤ 12) посчитать k!.
Входные данные:
	Одно целое число k, (0 ≤ k ≤ 12).
Выходные данные:
	Значение факториала числа k.

6.c
Посчитать значение N-го числа Фибоначчи.

7.c
Вывести все числа из промежутка [A;B], (B>A). При этом число A должно выводиться 1 раз,
число A+1 - два раза, A+2 - три раза и т.д.
Входные данные:
	Два натуральных числа A,B, таких, что (B > A).
Выходные данные:
	Число A, два числа A+1, три числа A+2 и т.д.
	Каждое число занимает поле шириной в 5 символа, выравнивание по правому краю.

8.c
Измените программу, написанную на прошлом шаге таким образом, чтобы каждое число выводилось столько раз,
каково его значение. Например, число 5 должно выводиться 5 раз.
Входные данные:
    Два натуральных числа A,B, таких, что B>A.
Выходные данные:
    A чисел A, A+1 чисел A+1 и т.д. Каждое число занимает поле шириной в 4 символа.

9.c
Делители
Для заданного числа n вывести все его делители и их количество на экран.
Входные данные:
    Одно натуральное число N.
Выходные данные:
    Делители числа N, записанные через один пробел в порядке возрастания.
    Количество делителей на отдельной строке.

10.c
Для заданного числа N проверить, является ли оно простым.
Входные данные:
    Одно натуральное число N, отличное от 1.
Выходные данные:
    1 - если число простое
    0 - если число составное

11.c
Гилл Байтс изучил циклы и решил написать программу, которая ищет максимальное среди чисел введённых
пользователем. Предполагалось, что программа будет работать следующим образом.
Пользователь вводит точное количество чисел, которые он хочет сравнить, например 5. После этого вводит
свои пять чисел по модулю не превышающих 100. Далее программа выдаёт ему максимальное среди них.
Гилл, как обычно, поторопился и допустил в программе некоторые ошибки. Помогите ему их исправить.
Обратите внимание на разработанный Гиллом алгоритм. Это стандартный алгоритм поиска максимального числа.
Попытайтесь самостоятельно разобраться с тем, как он работает.

12.c
Вывести последовательность чисел, поступившую на вход.
Входные данные:
    На вход программы поступает последовательность целых чисел.
    Количество чисел в последовательности заранее неизвестно. Но известно, что в конце
    последовательности записано число -9999 и в последовательности всегда есть хотя бы одно
    число, кроме -9999.
Выходные данные:
    Вывести элементы последовательности на экран через пробел.

13.c
Вывести последовательность чисел, поступившую на вход.
Входные данные:
    На вход программы поступает последовательность целых чисел. Количество чисел в последовательности
    заранее неизвестно, но зато известно, что в конце последовательности записано число -9999 и
    в последовательности всегда есть хотя бы одно число.
Выходные данные:
    Вывести все элементы последовательности, кроме заключительного -9999, на экран.

14.c
Вывести последовательность чисел, поступившую на вход.
Входные данные:
    На вход программы поступает последовательность целых чисел. Количество чисел в последовательности
    заранее неизвестно. Но известно, что в конце последовательности записано число -9999 и
    в последовательности может быть записано единственное число -9999.
Выходные данные:
    Вывести все элементы последовательности, кроме заключительного -9999, на экран.

15.c
Сумма элементов последовательности
Вычислить сумму элементов последовательности, неизвестной длины.
Входные данные:
    Последовательность целых чисел, оканчивающаяся нулём.
Выходные данные:
    Одно целое число -- сумма всех элементов последовательности.

16.c
Максимум и минимум
Необходимо найти максимальный и минимальный элемент последовательности, неизвестной длины.
Входные данные:
	Последовательность целых чисел, оканчивающаяся нулём. Само число нуль не является членом последовательности, 
	а является лишь сигналом того, что достигнут конец последовательности. В последовательности есть как минимум \
	одно ненулевое число.
Выходные данные:
	Вывести два целых числа M и m, где M - максимальный элемент последовательности, 
	m - минимальный элемент последовательности.

17.c
Точные квадраты
Выведите на экран все точные квадраты натуральных чисел, не превосходящие данного числа N. 
Выводить квадраты следует от меньшего к большему.
Входные данные:
	Одно целое число N. (1 ≤ N ≤ 10000)
Выходные данные:
	Квадраты натуральных чисел, записанные через пробел.

18.c
Степень двойки
По данном числу N определить, является ли оно степенью числа 2.
Входные данные:
	Одно целое неотрицательное число N.
Выходные данные:
	YES - если число N является степенью двойки, и NO в противном случае.

19.c
Количество цифр
Подсчитать количество цифр в записи натурального числа N.
Входные данные:
	Одно натуральное число N.
Выходные данные:
	Одно целое число k - количество цифр в записи числа N.
20.c
Степени двойки
По заданному N вывести через пробел все (натуральные, т.е. 1, 2, 3, ...) степени числа 2, для которых 2^k ≤ N.
Входные данные:
	Целое натуральное число N, причем N < 30000.
Выходные данные:
	Натуральные числа от 1 до p, такие, что если посчитать 2^k, 
	то получится число не превосходящее N.

21.c
Дано натуральное число N. Найти наименьшее натуральное число r, такое, что 2^r ≥ N.
Входные данные:
	Одно натуральное число N.
Выходные данные:
	Число r.

22.c
Перевёртыш
Напишите программу, которая по данному натуральному N печатает его цифры в обратном порядке.
Входные данные:
	Одно натуральное число N.
Выходные данные:
	Цифры числа N, записанные в обратном порядке.
23.c
Экспонента с заданной точностью
Вычислить число e = 1 + 1/1! + 1/2! + 1/3! + 1/4! + ... с точностью ε.
Входные данные:
	Вещественное число ε, (10^(-9) <= ε <= 10^(−1)).
Выходные данные:
	Значение числа e с точностью ε (8 знаков после запятой). 
	Считать, что достигнута точность ε, если очередной член последовательности ε, 
	т.е. 1/k! < ε
24.c
Быстрое возведение в степень
Входные данные:
	Два натуральных числа a и k.
Выходные данные:
	Одно целое число, равное a^k.

25.c
Наименьшее общее кратное
В Институте биоинформатики между информатиками и биологами устраивается соревнование. 
Победителям соревнования достанется большой и вкусный пирог. В команде биологов aa человек, 
а в команде информатиков — bb человек. Нужно заранее разрезать пирог таким образом, чтобы можно было 
раздать кусочки пирога любой команде, выигравшей соревнование, при этом каждому участнику этой команды 
должно достаться одинаковое число кусочков пирога. И так как не хочется резать пирог на слишком мелкие кусочки, 
нужно найти минимальное подходящее число. Напишите программу, которая помогает найти это число.
Входные данные:
	два положительных целых числа a и b
Выходные данные:
	Наименьшее число d, которое делится на оба этих числа без остатка

26.c
Вывести положительные члены последовательности чисел, поступившей на вход.
Входные данные:
	На вход программы поступает последовательность целых чисел. 
	Количество чисел в последовательности заранее неизвестно. 
	Но известно, что в конце последовательности записано число нуль и 
	в последовательности всегда есть хотя бы одно число.
Выходные данные:
	Вывести положительные элементы последовательности на экран через пробел. 
	Заключительный символ нуль выводить не нужно.

27.c
Пирамида.
Вывести на экран пирамиду из чисел.
Входные данные:
	Одно целое число N.
Выходные данные:
	Пирамида из натуральных чисел высоты N.

28.c
Положительная последовательность
Будем называть последовательность положительной, если все числа последовательности положительны.
Входные данные:
	Целочисленная последовательность произвольной длины, заканчивающаяся числом -9999
Выходные данные:
	YES - если последовательность положительная, 
	NO в противном случае (последовательность не положительная или 
	в последовательности отсутствуют числа.

29.c
Дубликаты
Удалить из последовательности дубликаты.
Входные данные:
	В первой строке задано натуральное число N. Во второй строке записана упорядоченная по возрастанию 
	последовательность из N целых чисел, которая может содержать одинаковые элементы.
Выходные данные:
	Вывести все различные элементы последовательности, упорядоченные по возрастанию.

30.c
Возрастающая последовательность
Последовательность назовём возрастающей, если каждый её следующий член больше предыдущего. 
Написать программу, проверяющую является ли последовательность возрастающей.
Входные данные:
	Последовательность целых чисел. Признак окончания последовательности - число -9999. 
	В последовательности всегда есть хотя бы два числа, кроме числа -9999.
Выходные данные:
	YES - если последовательность является возрастающей, NO в противном случае.

31.c
Модернизировать программу, написанную на прошлом шаге так, чтобы программа выдавала число 0, 
если последовательность возрастающая, либо номер элемента последовательности, нарушающего возрастание.
Входные данные:
	Последовательность целых чисел. Признак окончания последовательности - число -9999.
Выходные данные:
	Число 0 - если последовательность возрастающая. 
	Число k -- если последовательность не является возрастающей. 
	k - номер первого члена последовательности, которые нарушает возрастание.

32.c
Кодограмма
Из штаба округа на пульт военной части поступают кодограммы - последовательности, содержащие четырёхзначные числа. 
Т.к. канал связи может прослушиваться, то была разработана специальная методика.
В канал связи постоянно отправляют различные кодограммы. При этом, передача секретных данных начинается только 
после того, как была отправлена кодограмма 2517.
Входные данные:
	Последовательность целых чисел. Признак окончания последовательности - число -9999.
	В последовательности обязательно присутствует число 2517.
Выходные данные:
	Вывести все секретные кодограммы.

33.c
Сумма элементов
Найти сумму элементов последовательности, расположенных между нулями.
Входные данные:
	Последовательность целых чисел. Признак окончания последовательности - число -9999. 
	В последовательности обязательно присутствуют два числа 0.
Выходные данные:
	Сумму всех элементов последовательности, которые расположены между двумя нулями. 
	Если нули идут друг за другом, то вывести 0.